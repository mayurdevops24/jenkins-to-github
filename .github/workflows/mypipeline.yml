name: MyPipeline
on:
  workflow_dispatch:
    inputs:
      PATCH_NAME:
        required: false
        description: Inform the patch number
        default: none
      RELEASE:
        required: false
        description: Inform the release
        default: QBL.d
      REFERENCE:
        required: false
        description: Optionally inform reference baseline
        default: none
      DEBUG:
        required: false
        description: Inform the debug level
        default: 'FALSE'
      LIB_BRANCH:
        required: false
        description: Inform the LIB BRANCH to bind
        default: master
env:
#   # This item has no matching transformer
#   PATH: '"/sdev/simgt/sbin:$PATH"'
  SQUID_DBSET: CQMS.ASML.EINDHOVEN
  CCMAKE_CONTINUE_ON_ERROR: 'TRUE'
  CCASE_ENABLE_SQUID: 1
#   # This item has no matching transformer
#   PROD_TOKEN:
#   # This item has no matching transformer
#   FCO_PROD_TOKEN:
#   # This item has no matching transformer
#   STAGING_TOKEN:
#   # This item has no matching transformer
#   PATCH_NAME: ${evalParameter('PATCH_NAME',"${{ inputs.PATCH_NAME }}")}
#   # This item has no matching transformer
#   RELEASE: ${evalParameter('RELEASE',"${{ inputs.RELEASE }}")}
#   # This item has no matching transformer
#   REFERENCE: ${evalParameter('REFERENCE',"${{ inputs.REFERENCE }}")}
#   # This item has no matching transformer
#   DEBUG: ${evalParameter('DEBUG',"${{ inputs.DEBUG }}")}
#   # This item has no matching transformer
#   PYTHONPATH: '"$WORKSPACE/lib/obi-fw:$WORKSPACE/lib/simgt/python23:/home/simgt/litho-bitbucket/simgt-home-lib/python3.8/site-packages:/home/simgt/.caddir/RHEL8/cadlib:/home/simgt/.caddir/RHEL8/.caddata:lib/python:bin/python"'
  PYTHONHOME: ''
  PIP_CONFIG_FILE: "/home/simgt/.obi/pip.conf"
#   # This item has no matching transformer
#   USE_QUEUE_STAGING: "${isTestEnvironment()}"
#   # This item has no matching transformer
#   ALLOW_AUTO_INTEGRATION: "${selectEnvAllowAutoMerge()}"
jobs:
  Define_Job_Configuration:
    if:
#       # Unsupported condition(s) [expression]
    name: Define Job Configuration
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: 'echo ${"[Info] Executing pipeline for project: "+env.PATCH_NAME+'' @ ''+env.RELEASE+'' (DEBUG Mode = ''+env.DEBUG+'')''}'
    - name: sh
      shell: bash
      run: ip -h -f inet add
    - name: sh
      shell: bash
      run: source /cadappl/cadenv/cadenv_switch.sh CI
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: "def subModuleBranch = evalParameter('LIB_BRANCH', \"${{ inputs.LIB_BRANCH }}\")\n                    command = './bin/configure-submodules.sh > configure-submodules-out.txt ' + subModuleBranch + '; echo $? > status;'\n                    sh ( script: command , returnStdout: true )\n                    println '[Result] - Exit Value: ' + readFile('status').trim()\n\n                    // Clean the previous venv in the same node (if any).\n                    sh ( script: 'rm -rf .venv || true')\n                    try {\n                        sh \"\"\"\n                          python3 -m venv .venv\n                          .venv/bin/pip install --no-cache-dir --upgrade pip\n                          .venv/bin/pip install --no-cache-dir pymysql mysql-connector mysql-connector-python\n                        \"\"\"\n                    } catch( Exception ex ) {\n                        println \"Fall back to backup '.venv' area, since the following exception was caugth while trying to setup the virtualenv: \" + ex.toString()\n                        sh \"\"\"\n                          rm -rf .venv || true\n                          ln -f -s /home/simgt/.obi/.venv\n                        \"\"\"\n                    }\n\n                    // Activate the venv\n                    sh ( script: 'source .venv/bin/activate' )\n                    // Echo'ing default PYTHONPATH value as seen from the shell\n                    sh ( script: 'echo \"PYTHONPATH set to : $PYTHONPATH\"', returnStdout: true )\n                    // Validates which python3 interpreter is in use\n                    sh ( script: 'echo -n \"python3 set to : \" && which python3', returnStdout: true )\t\t\t\t\t\n                    \n// Prevent double-executions for the same parameters in PATCH_NAME and RELEASE, for the same environment.\n                    if (env.USE_QUEUE_STAGING.toBoolean()) {\n                        command = './checkers/23/checkExecutionStatus.py -d --env test --rel ' + env.RELEASE + ' -p ' + env.PATCH_NAME + ' --build-id ' + env.BUILD_NUMBER + '; echo $? > status;'\n                    } else {\n                        command = './checkers/23/checkExecutionStatus.py --env pk8s --rel ' + env.RELEASE + ' -p ' + env.PATCH_NAME + ' --build-id ' + env.BUILD_NUMBER + '; echo $? > status;'\n                    }\n\n                    sh ( script: command , returnStdout: true )\n                    println '[Result] - Exit Value: ' + readFile('status').trim()\n\n                    // If this execution is valid, set the displayed name for it:\n                    currentBuild.displayName = \"${{ env.PATCH_NAME }}\"\n\n                    // Gather the information regarding the PATCH_NAME and RELEASE, considering the PT environment to look for:\n                    command = './checkers/23/gatherDeliveryInfo.py'\n\n                    if (env.DEBUG.toBoolean()) {\n                        println '[Debug] Using Staging area. Adding -e -d to the command call'\n                        command += ' -e -d  --rel ' + env.RELEASE + ' -p ' + env.PATCH_NAME + ' --build-id ' + env.BUILD_NUMBER + ' --token ' + env.STAGING_TOKEN\n                    } else {\n                        command += ' --rel ' + env.RELEASE + ' -p ' + env.PATCH_NAME + ' --build-id ' + env.BUILD_NUMBER + ' --token ' + env.PROD_TOKEN\n                    }\n\n                    stepName = 'Define Job Configuration'\n                    shChain()\n\n                    // Fail the step after storing the step result key in the hash (for post actions).\n                    if ( stepSummary.get(stepName) == 'FAILED' ) {\n                        sh ( script: '/bin/false' )\n                    } else {\n                        // Notify Release Integrators and project that a new valid run has been started on the pipeline.\n                        command = './checkers/23/notifyJobStart.py --rel ' + env.RELEASE + ' --job-name ' + env.JOB_NAME + ' --build-url ' + env.BUILD_URL + ' -p ' + env.PATCH_NAME + ' --build-id ' + env.BUILD_NUMBER + '; echo $? > status;'\n\n                        sh ( script: command , returnStdout: true )\n                        println '[Result] - Exit Value: ' + readFile('status').trim()\n                    }"
  Release_Quality_Policy_Check:
    if:
#       # Unsupported condition(s) [expression]
    name: Release Quality Policy Check
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Define_Job_Configuration
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/3.8/zerotolerance-analysis.py -d --build-id ' + env.BUILD_NUMBER + ' --job-name ' + env.JOB_NAME
#                                 stepName    = 'Release Quality Policy Check'
#                                 shChain()
  Perform_Static_Checks:
    if:
#       # Unsupported condition(s) [expression]
    name: Perform Static Checks
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Release_Quality_Policy_Check
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: 'echo ${"[Info] Running pre-static checks for patch: "+env.PATCH_NAME}'
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             println '[Info] initial patch prediction'
#                                 command     = './checkers/23/generatePrediction.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Generate Patch'
#                                 shChain()
#
#                                 println '[Info] Storing Original CWBD integration-related checks as provided by the project on HOI time.'
#                                 command     = './checkers/23/recordCwbdStatus.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PreInt-CWBD'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Running selected CWBD integration-related checks after recording the initial status.'
#                                 command     = './checkers/23/runCwbd.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PreInt-CWBD'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check XFaceMaker Changes.'
#                                 command     = './checkers/23/checkXfacemaker.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PreInt-CheckXFaceMaker'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check VP Items.'
#                                 command     = './checkers/23/runCheckVP.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PreInt-CheckVP'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check VP Items legacy style'
#                                 command     = './checkers/23/checkLegacyVP.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Legacy-CheckVP'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check CM Items.'
#                                 command     = './checkers/23/runCheckCM.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PreInt-CheckCM'
#                                 shChain()
#             // --------
#                                 // Because this checker have different trigger conditions, the 'when' clause of them needed to be converted to if clauses inside the aggregator step.
#                                 // --------
#                                 // Skip next checkers for fastlanes (based on name pattern)
#                                 //if ( env.PATCH_NAME.contains('_fl_') || env.PATCH_NAME.contains('_notgt_') ) {
#                                 //    stepSummary.put('Questionnaire-Check' , 'SKIPPED')
#                                 //} else {
#                                 println '[Info] PDF-Questionnaire for non-fastlanes pdfs in QBL.d release.'
#                                 command     = './checkers/23/parseQuestionnaire.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Questionnaire-Check'
#                                 shChain()
#                                 //}
#                                 // --------
#                                 println '[Info] Check if PDF has AIRs already integrated before.'
#                                 command     = './checkers/23/checkAIRnotAlreadyDelivered.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Duplicated AIR'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check DeliverConfig.'
#                                 command     = './checkers/23/checkDeliverConfig.py --build-id ' + env.BUILD_NUMBER + ' --rel ' + params.RELEASE
#                                 stepName    = 'Check-DeliverConfig'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check illegal scopefile dependencies.'
#                                 command     = './checkers/23/checkrpforBBAndInterface.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Check-Scope'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check illegal changes in makefiles.'
#                                 command     = './checkers/23/checkIllegalFolders.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Check-Makefile'
#                                 shChain()
#                                 // --------
#                                 println '[Info] Check illegal MDL changes.'
#                                 command     = './checkers/23/checkMDL.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Check-MDL'
#                                 shChain()
#                                 // Execute automatic approval of FCO for test only code
#                                 command     = './checkers/3.8/acceptTestOnlyFCO.py --build-id ' + env.BUILD_NUMBER + ' --token ' + env.FCO_PROD_TOKEN
#                                 stepName    = 'Auto-Approve-FCO'
#                                 shChain()
#                                 // --------
#                                 command     = './checkers/23/isFcoAccepted.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'FCO Status'
#                                 shChain()
#                                 // --------
#                                 command     = './checkers/23/checkFactoryManualActions.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Factory-Manual-Actions'
#                                 shChain()
#
#                                 // Add tags for Test Only Deliveries
#                                 command = "/bin/sh +e -c './checkers/23/addTestOnlyDeliveryTag.py --build-id " + env.BUILD_NUMBER + "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#                                 stepName   = 'Add Test Only Delivery Tags'
#             // check presence of KT and send notificatio when present
#                                 command = "/bin/sh +e -c './checkers/23/checkKT.py --build-id " + env.BUILD_NUMBER + "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#                                 // --------
#                                 if (selectEnvAllowAutoMerge()) {
#                                     println '[Info] Check overlap for pdfs in QBL.d release.'
#                                     command     = './checkers/23/checkBaselined.py --build-id ' + env.BUILD_NUMBER
#                                     stepName    = 'Check Overlap'
#                                     shChain()
#                                 }
#                                 else {
#                                     command     = './checkers/23/checkOverlap.py --build-id ' + env.BUILD_NUMBER
#                                     stepName    = 'Check Overlap'
#                                     shChain()
#                                 }
#
#                                 // Ending Logic to determine if this step failed based on the results of the above executions
#
#                                 boolean isGroupFailure = false
#
#                                 for (String entry : stepSummary.keySet()) {
#
#                                     // Only care about the steps results in this group (slice of stepSummary total keys)
#                                     if (entry =~ /PreInt-CWBD|PreInt-CheckXFaceMaker|PreInt-CheckVP|PreInt-CheckCM|FCO Status|Factory-Manual-Actions|Questionnaire-Check|Duplicated AIR|Check-DeliverConfig|Check-Scope|Check-Makefile|Check-MDL|Check Overlap/) {
#                                         println '[Result] - ' + entry + ' : ' + stepSummary.get(entry)
#
#                                         // If one of the checks in this group fails, consider the whole step as FAILED.
#                                         if (stepSummary.get(entry) == 'FAILED')
#                                             isGroupFailure = true
#                                     }
#                                 }
#
#                                 println '[Info] Final result for static checks: ' + ( (isGroupFailure == false ) ? 'OK' : 'NOK' )
#
#                                 if (isGroupFailure) {
#                                     sh ( script: '/bin/false')
#                                 }
  Wait_for_new_baseline:
    if:
#       # Unsupported condition(s) [expression]
    name: Wait for new baseline
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Perform_Static_Checks
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: echo [Info] Check if a new daily build have started and wait until the baseline is ready if there is a new daily build running
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/waitForNewBaseline.py --build-id ' + env.BUILD_NUMBER + ' --ref ' + params.REFERENCE
#                                 stepName    = 'Wait for new baseline'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Change_FI_Create_New_View:
    if:
#       # Unsupported condition(s) [expression]
    name: Change FI + Create New View
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Wait_for_new_baseline
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: 'echo ${"[Info] Change FI to simgt in: "+env.PATCH_NAME+" and creating a new view."}'
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/changeFI.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Change-FI'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Rebase_to_Latest_Daily:
    if:
#       # Unsupported condition(s) [expression]
    name: Rebase to Latest Daily
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Change_FI_Create_New_View
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: echo ${"[Info] Rebasing "+env.PATCH_NAME+" to the latest QBL daily baseline."}
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command = "/bin/sh +e -c './checkers/23/extendBuildscopeForDependingComponents.py --extrasmart --build-id " + env.BUILD_NUMBER+ "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#
#                                 // rebase to the latest daily
#                                 command     = './checkers/23/rebaseToLatestDaily.py --build-id ' + env.BUILD_NUMBER + ' --rel ' + params.RELEASE
#                                 stepName    = 'Rebase-LatestDaily'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Schedule_Build:
    if:
#       # Unsupported condition(s) [expression]
    name: Schedule Build
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Rebase_to_Latest_Daily
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: 'echo ${"[Info] About to build simgt view of: "+env.PATCH_NAME}'
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/executeBuild.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Schedule Build'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Check_Build_Results:
    if:
#       # Unsupported condition(s) [expression]
    name: Check Build Results
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Schedule_Build
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: 'echo ${"[Info] Checking the outcome of the build for patch: "+env.PATCH_NAME}'
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/checkBuildResults.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Build Results'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Generate_Prediction:
    if:
#       # Unsupported condition(s) [expression]
    name: Generate Prediction
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Check_Build_Results
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/generatePrediction.py -r -c --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Generate Patch'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Check_Partial_Vent:
    if:
#       # Unsupported condition(s) [expression]
    name: Check Partial Vent
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Generate_Prediction
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/checkPartialVent.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Check Partial Vent'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Wait_for_devbench_images:
    if:
#       # Unsupported condition(s) [expression]
    name: Wait for devbench images
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Check_Partial_Vent
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: echo [Info] Check the devbench images for the latest baseline are available
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command = "/bin/sh +e -c './checkers/23/checkCloudQuota.py --build-id " + env.BUILD_NUMBER + ' --ref ' + params.REFERENCE + "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#
#                                 command = "/bin/sh +e -c './checkers/23/preScheduleQsetOnPatchedImages.py --build-id " + env.BUILD_NUMBER + ' --job-name ' + env.JOB_NAME + ' --rel ' + params.RELEASE + ' --ref ' + params.REFERENCE + "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#
#                                 command = "/bin/sh +e -c './checkers/23/scheduleTBQset.py --build-id " + env.BUILD_NUMBER + ' --job-name ' + env.JOB_NAME + ' --rel ' + params.RELEASE + ' --ref ' + params.REFERENCE + "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#
#                                 command     = './checkers/23/waitForDevbenchImages.py --build-id ' + env.BUILD_NUMBER + ' --ref ' + params.REFERENCE
#                                 stepName    = 'Wait for devbench images'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 } else {
#                                     command = "/bin/sh +e -c './checkers/23/preScheduleIBQ.py --build-id " + env.BUILD_NUMBER + ' --job-name ' + env.JOB_NAME + ' --rel ' + params.RELEASE + ' --ref ' + params.REFERENCE + "; echo \$? > status; /bin/true;'"
#                                     sh ( script: command , returnStdout: true )
#                                 }
  Complete_Rebase_Make_BL:
    if:
#       # Unsupported condition(s) [expression]
    name: Complete Rebase + Make BL
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Wait_for_devbench_images
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/completeRebaseAndMakeBaseline.py --build-id ' + env.BUILD_NUMBER + ' --rel ' + params.RELEASE + ' --ref ' + params.REFERENCE
#                                 stepName    = 'Complete-Rebase-BL'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Post_Static_Checks:
    if:
#       # Unsupported condition(s) [expression]
    name: Post Static Checks
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Complete_Rebase_Make_BL
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: 'echo ${"[Info] Running POST static checks for patch: "+env.PATCH_NAME}'
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/runCwbd.py --post --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PostInt-CWBD'
#                                 shChain()
#                                 // --------
#                                 command     = './checkers/23/checkXfacemaker.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PostInt-CheckXFaceMaker'
#                                 shChain()
#                                 // --------
#                                 command     = './checkers/23/runCheckVP.py  --post --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PostInt-CheckVP'
#                                 shChain()
#                                 // --------
#                                 command     = './checkers/23/runCheckCM.py --post --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'PostInt-CheckCM'
#                                 shChain()
#
#                                 // Ending Logic to determine if this step failed based on the results of the above executions
#
#                                 boolean isPostGroupFailure = false
#
#                                 for (String entry : stepSummary.keySet()) {
#
#                                     // Only care about the steps results in this group (slice of stepSummary total keys)
#                                     if (entry =~ /PostInt-CWBD|PostInt-CheckVP|PostInt-CheckCM|PostInt-CheckXFaceMaker/) {
#                                         println '[Result] - ' + entry + ' : ' + stepSummary.get(entry)
#
#                                         // If one of the checks in this group fails, consider the whole step as FAILED.
#                                         if ( stepSummary.get(entry) == 'FAILED' )
#                                             isPostGroupFailure = true
#                                     }
#                                 }
#
#                                 println '[Info] Final result for post static checks: ' + ( (isPostGroupFailure == false ) ? 'OK' : 'NOK' )
#
#                                 if (isPostGroupFailure) {
#                                     sh ( script: '/bin/false')
#                                 }
  Test_Domain_Checks:
    if:
#       # Unsupported condition(s) [expression]
    name: Test Domain Checks
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Post_Static_Checks
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/runTestarenaTests.py --build-id ' + env.BUILD_NUMBER + ' --job-name ' + env.JOB_NAME + ' --rel ' + params.RELEASE + ' --ref ' + params.REFERENCE
#                                 stepName    = 'Run Tests'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Wait_for_recommendation:
    if:
#       # Unsupported condition(s) [expression]
    name: Wait for recommendation
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Test_Domain_Checks
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
    - name: echo message
      run: echo [Info] Check if a new daily build have started and wait until the baseline is ready if there is a new daily build running
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/waitForRecommendation.py --build-id ' + env.BUILD_NUMBER + ' --ref ' + params.REFERENCE + ' --token ' + env.PROD_TOKEN
#                                 stepName    = 'Wait for recommendation'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Check_Integration_Status:
    if:
#       # Unsupported condition(s) [expression]
    name: Check Integration Status
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Wait_for_recommendation
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command = "/bin/sh +e -c './checkers/23/recordMergeCompatibilityInfo.py --build-id " + env.BUILD_NUMBER + "; echo \$? > status; /bin/true;'"
#                                 sh ( script: command , returnStdout: true )
#
#                                 command     = './checkers/23/manageQueue.py'
#                                 stepName    = 'Check Integration Status'
#
#                                 if (env.USE_QUEUE_STAGING.toBoolean()) {
#                                     println '[Debug] Manage Queue on staging area. Adding -e -d to the command call'
#                                     command += ' -e -d --build-id ' + env.BUILD_NUMBER
#                                 } else {
#                                     command += ' --build-id ' + env.BUILD_NUMBER
#                                 }
#
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
  Integrate_to_QBL:
    if:
#       # Unsupported condition(s) [expression]
    name: Integrate to QBL
    runs-on:
      - ubuntu-latest
      - simgt-fullclient-2
    needs: Check_Integration_Status
    steps:
    - name: checkout
      uses: actions/checkout@v4.1.0
#     # 'script' was not transformed because there is no suitable equivalent in GitHub Actions
#     - name: script
#       arguments:
#       - key: scriptBlock
#         value:
#           isLiteral: true
#           value: |-
#             command     = './checkers/23/checkOverlap.py --build-id ' + env.BUILD_NUMBER
#                                 stepName    = 'Final Check Overlap'
#                                 shChain()
#
#                                 // Fail the step after storing the step result key in the hash (for post actions).
#                                 if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                     sh ( script: '/bin/false')
#                                 }
#
#                                 if (selectEnvAllowAutoMerge()) {
#                                     if (env.DEBUG.toBoolean()) {
#                                         println '[Debug] Using Staging area. Will integrate to 4.0.4.c.'
#                                         command = 'echo ./checkers/23/integrateTo404.py --build-id ' + env.BUILD_NUMBER
#                                     } else {
#                                         command = './checkers/23/integrateToQBL.py --build-id ' + env.BUILD_NUMBER
#                                     }
#
#                                     stepName    = 'Integrate-to-QBL'
#                                     shChain()
#
#                                     // Fail the step after storing the step result key in the hash (for post actions).
#                                     if ( stepSummary.get(stepName) == 'FAILED' ) {
#                                         sh ( script: '/bin/false')
#                                     }
#                                 }
 
